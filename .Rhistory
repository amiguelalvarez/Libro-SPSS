tinytex::install_tinytex()
#-----Practica 2
#----Ejercicio1a -----
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(fpp3)
library(slider)
library(seasonal)
data(canadian_gas)
canadian_gas
autoplot(canadian_gas, Volume) +
ylab("volumen")+
xlab("fecha") +
ggtitle("produccion nacional de gas en canada")
dcmp_can <- canadian_gas %>%
model(STL(Volume))
dcmp_can
# Componente trend-cycle
canadian_gas %>% autoplot(Volume, color='gray') +
autolayer(components(dcmp_can), trend, color='blue') +
xlab("fecha") + ylab("volumen") +
ggtitle("Produccion de Gas Canada - Tendencia")
#hay una tendencia del crecimiento y del decrecimiento en la produccion del gas, se puede observar que la tendencia es de manera ascendente, se puede observar a su ves que hay fluctuaciones estructurales que afectan a la producion de gas
# Datos ajustados por estacionalidad
canadian_gas %>%
autoplot(Volume, color='gray') +
autolayer(components(dcmp_can), season_adjust, color='green') +
xlab("fecha") + ylab("volumen") +
ggtitle("Produccion de Gas Canada - Desestacionalizado")
#se tiene un aumento general en la produccion de gas con ligeras fluctuaciones estacionales
#Graficos extras (no se como interpretarlas)
gg_season(canadian_gas,Volume)+
labs(tittle="Estacionalidad Gas Canada",
y="volumen",
x="mes")
#el volumen de produccion varia segun el mes, se puede observar un patron estacional dado que en las epocas de invierno este incrementa y en la temporada de verano este tiende a disminuir
gg_season(canadian_gas, Volume, polar = TRUE) +
labs(title = "Estacionalidad Gas Canada (Polar)",
y = "Volumen",
x = "Mes")
#----Ejercicio 1b-----
x11_dcmp_can  <- canadian_gas %>%
model(x11 = X_13ARIMA_SEATS(Volume ~ x11()))
x11_dcmp_can
x11_component_can <- components(x11_dcmp_can)
head(x11_component_can,10)
autoplot(x11_component_can) + labs(title = "Decomposicion de la produccion total de canada using X-11.")
x11_component_can %>% ggplot(aes(x = Month)) +
geom_line(aes(y = Volume, colour = "Data")) +
geom_line(aes(y = season_adjust, colour = "Seasonally Adjusted")) +
geom_line(aes(y = trend, colour = "Trend")) +
labs(y = "Produccion Gas", title = "Produccion de gas Canada") +
scale_colour_manual(values = c("gray", "#0072B2", "#D55E00"),
breaks = c("Data", "Seasonally Adjusted", "Trend"))
x11_component_can %>%
gg_subseries(seasonal)
quarto render
### Instalar librerías
install.packages("viridis")
install.packages("viridisLite")
install.packages("tidyverse")
install.packages("sf")
install.packages("rayshader")
install.packages("magick")
install.packages("av")
### Activar librerías
library(viridis)
library(viridisLite)
library(tidyverse)
library(sf)
library(rayshader)
library(magick)
library(av)
### Importar Shapefile
shp = st_read(dsn = "D:/Descargas/Grafico 3D en R/ecu.shp")
print(shp)
shp = mutate(shp, Datos =AN)
### Dibujar
### scale_color_viridis()
### scale_fill_viridis()
ggShp = ggplot(data = shp) +
geom_sf(aes(fill = Datos)) +
scale_color_viridis() +
ggtitle("ANALFABETISMO EN ECUADOR") +
theme_bw()
print(ggShp)
### Transformar a 3D
plot_gg(ggShp,multicore=TRUE,width=5,height=5,scale=200,windowsize=c(1280,720),
zoom = 0.65, phi = 50, sunangle = 20,theta=45)
render_snapshot()
### Crear un vídeo
Video <- file.path("D:/Descargas/Grafico 3D en R/", "pop.mp4")
render_movie(filename=Video)
library(echarts4r)
y
install.packages("later")
library(echarts4r)
remove.packages("promises")
install.packages("promises")
library(echarts4r)
install.packages("httpuv")
library(echarts4r)
remove.packages("xtable")
install.packages("xtable")
library(echarts4r)
remove.packages("shiny")
install.packages("shiny")
library(echarts4r)
# Datos
data <- data.frame(
Declaración = c("Lugar de Residencia", "Lugar/Departamento de Titulación Académica", "Estudios Realizados en el Exterior"),
Sí = c(60.00, 32.73, 47.27),
No = c(30.91, 67.27, 36.36),
Depende = c(9.09, 0.00, 16.36)
)
# Transformar los datos para heatmap
heatmap_data <- data %>%
tidyr::pivot_longer(cols = -Declaración, names_to = "Respuesta", values_to = "Porcentaje") %>%
dplyr::mutate(Declaración = factor(Declaración, levels = unique(Declaración)))
library(echarts4r)
library(dplyr)
library(tidyr)
# Datos
data <- data.frame(
Declaración = c("Lugar de Residencia", "Lugar/Departamento de Titulación Académica", "Estudios Realizados en el Exterior"),
Sí = c(60.00, 32.73, 47.27),
No = c(30.91, 67.27, 36.36),
Depende = c(9.09, 0.00, 16.36)
)
# Transformar los datos para heatmap
heatmap_data <- data %>%
tidyr::pivot_longer(cols = -Declaración, names_to = "Respuesta", values_to = "Porcentaje") %>%
dplyr::mutate(Declaración = factor(Declaración, levels = unique(Declaración)))
# Crear el gráfico
heatmap <- heatmap_data %>%
e_charts(Declaración) %>%
e_heatmap(Respuesta, Porcentaje) %>%
e_visual_map(Porcentaje) %>%
e_tooltip()
# Guardar el gráfico como archivo HTML
htmlwidgets::saveWidget(heatmap, "heatmap_interactivo.html", selfcontained = TRUE)
